version: 2.1

# Use a package of configuration called an orb.
orbs:
  # Choose either one of the orbs below
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3

commands:
  # Exercise - Rollback
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}

# Define the jobs we want to run for this project
jobs:
  # Exercise: Config and Deployment
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file IFC.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1
      - run:
          name: Install tar utility
          command: yum install -y tar gzip
      - run:
          command: "> /root/project/inventory.txt"
      - run:
          command: echo [all] >> /root/project/inventory.txt
      - run:
          name: store instance ip
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:name,Values=ansible" \
              --output text >> /root/project/inventory.txt
      - persist_to_workspace:
          root: /root/project/
          paths:
            - inventory.txt

  configure_infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          # You can get this ID in the section where you registered the SSH Key
          fingerprints: ["41:0a:b2:e3:29:d7:8a:6b:36:be:69:b4:52:59:57:3d"]
      - attach_workspace:
          at: /root/project/
      - run:
          command: cat /root/project/inventory.txt
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i inventory.txt main-remote.yml

  # Exercise: Smoke Testing
  smoke_test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - run:
          name: Install tar utility
          command: yum install -y tar gzip
      - attach_workspace:
          at: /root/project/
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |

            IP=`sed -n '2{p;q}' /root/project/inventory.txt`
            # Test if website exists
            if curl -s --head "http://${IP}:4000" 
            then
              return 0
            else
              return 1
            fi
      - destroy_environment

workflows:
  my_workflow:
    jobs:
      - create_infrastructure
      - configure_infrastructure:
          requires:
            - create_infrastructure
      - smoke_test:
          requires:
            - configure_infrastructure
